import xml.etree.ElementTree as ET
from svg_code import  *


def get_allDNA(Tag_DNAseqlist):
    # 传入编码得到的DNAseq的list 返回解码得到各个
    allDNA = []
    for i in Tag_DNAseqlist:
        allDNA.append(decode_tag(i))
    return allDNA



def generate_SVGtag(tag_list):
    tag_name = tag_list[0]
    line = '<{}'.format(tag_name)
    text_val = ''
    for attr in tag_list[4:]:
        if attr[0] != 'text':
            line += ' {} = \"{}\"'.format(attr[0],attr[1])   
        else :
            text_val = attr[1]
    line += '>{}</{}>'.format(text_val,tag_name)
    return line



def add_child(root,tag_name, child):
    idx = -1*len(tag_name)-3
    line = '\n'.join([root[:idx], child])
    line += '\n'+root[idx:]
    return line
# 将并列的后一个标签写入


def add_bro(root, bro):
    line = '\n'.join([root, bro])
    return line



def dfs_add(allDNA, cur=0):
    # 将各个标签拼接
    # 下标=编号-1  cur为下标
    first_child = int(allDNA[cur][2])
    bro = int(allDNA[cur][3])
    cur_tag_name = allDNA[cur][0]
    # print(cur_tag_name)
    # ret = ''
    # print(allDNA[cur][0])
    
    if first_child == -1:
        if bro == -1:
            return generate_SVGtag(allDNA[cur])
        else:
            return add_bro(generate_SVGtag(allDNA[cur]), dfs_add(allDNA, bro))
    else:
        leaf = add_child(generate_SVGtag(allDNA[cur]),cur_tag_name, dfs_add(allDNA, first_child))
        if bro == -1:
            return leaf
        else:
            return add_bro(leaf, dfs_add(allDNA, bro))


def generate_svg(DNAseq):
    # 传入各个标签及参数的DNA序列list
    allDNA = get_allDNA(DNAseq) #将DNAseq转化成各个标签及参数
    allDNA = sorted(allDNA, key=lambda x: int(x[1]))
    file = '<?xml version="1.0" ?>'
    file += dfs_add(allDNA) 
    return file


if __name__ == '__main__':
    # test1
    seq = ['GGTATGAATAAATTTATTATCACTACTAAATAAATAATCTAAAAAATCTAAAAATAGATTAGAT', 'TGTATGAATTAAGTCGAATCATA', 'TTTATGAAGTCGTATTTATTGTAGTAAACGCTCAGTCGATGAGACGTAGATTGCGTCTCTCCTTCGATCGAAGCCACAGTCAGAGATTCTCAGCATCTCAGTAAGCGTGGTACGCTCAGTCGATGAGACGTAGACTGCGTCTCTCCTTCGATCGAAGCCACAGAGTTTCTTTCATAGTTAGTTTCAGAGCGTGGTACGCTCAGTCGATGAGACGTAGAGTGCGTCTCTCCTTCGATCGAAGCCACAGTCTCTCTCTCTCAGCGTGGTACGCTCAGTCGATGAGACGTAGTATGCGTCTCTCCTTCGATCGAAGCCACAGAGAAAGTTTCAGTCTATCTCTCTCAGCGTGGTACGCTCAGTCGATGAGACGTAGTTTGCGTCTCTCCTTCGATCGAAGCCACAGAGTCTCTTTCTTAGATTCTCTCTCAGCGTGGTACGCTCAGTCGATGAGACGTAGTCTGCGTCTCTCCTTCGATCGAAGCCACAGAGAAAGAATCATTCTCTCTCAGTAAGCGTGGTACGCTCAGTCGATGAGACGTAGTGTGCGTCTCTCCTTCGATCGAAGCCACAGTCATTCATTCTAAGTTAGTAAGAAAGCGTGGTACGCTCAGTCGATGAGACGTAGCATGCGTCTCTCCTTCGATCGAAGCCACAGAGTTAGACAGAGAGCAAGAGAGCAAGCGTGGTACGCTCAGTCGATGAGACGTAGCTTGCGTCTCTCCTTCGATCGAAGCCACAGAGCATCACTCAGAGCAAGTTAGACAGCGTGGTACGCTCAGTCGATGAGACGTAGATAGAATGCGTCTCTCCTTCGATCGAAGCCACAGAGTCAGTCAGTAAGTTAGTAAGTTAGCGTGGTATA', 'AATATGAATCTATTAATGACTAAGGGTCCAAGGTTGACTATAAATCAAGAACCTACTAAGGATAACGGTTGAATTTTGACTTTCAGTCGATGAGACGTAGAT', 'ACTATGAATGTATTAACTAGTAGGCATAGTAGCAAGTCAGCTACGCAGACAGTGACGAAGTAAGACAGTAACGCAGTTAGCATCGAACGTAGATAGTAAGTTACGCAGATAGCTACGTAGTTAGTGTCATAGCAAGTGACGCAGTAACGAAGCAAGTGACGCAGTAACGAAGAAACGAAGAAACGAAGATACGTAGACACGCAGATACGAAGTCAGTGACGCAGTGAGATTCCAAGAATCATAGCAAGTGACGCAGTGAGACACGAAGCAAGTGACGCAGTGAGACACGAAGAAACGAAGAAACGAAGATACGTAGATAGATAGTCACGCAGACACGAAGTAAGAGACGCAGTAAGTCTCGAACGTAGACAGTCAGCTACGCAGCTAGTAACGTAGATAGACAGAGTCATAGCAAGTGACGCAGTGAGACACGAAGCAAGTGACGCAGTGAGACACGAAGAAACGAAGAAACGAAGATACGTAGTAAGAGACGCAGTAAGTTACGTAGATAGATAGTCACGCAGACTCCAAGAATCATAGCAAGTGACGCAGAGAGTTACGAAGCAAGTGACGCAGAGAGTTACGAAGAAACGAAGAAACGAAGATACGAAGACAGTAACGCAGTCAGCTACGTAGAGAGATACGCAGCAAGTCTCGAACGTAGACAGAGACGCAGTCAGCAACGTAGCTACGCAGAGTCAGACGTAGATAGATAGAAACGAAGTCAGTTACGCAGATAGTTACGTAGATAGCAAGTTACGCAGTAAGCAACGAAGATAGCAAGACACGCAGTAAGCTACGTAGATAGCTAGACACGCAGACAGTTACGAAGAGAGATAGTGACGCAGCTAGTATACAAGCAAGCAAGTAACGCAGCTTAATAGAGAGCTAGAAACGCAGCTAGACACGAAGAGAGCTAGAAACGCAGCTAGACACGAAGAAACGAAGAAACGAAGAAACGAAGCAAGTCAGCTACGCAGACAGTGACGAAGTAAGACAGTAACGCAGTTAGCATTCCATTTTGACTTTCAGTCGATGAGACGTAGAC', 'AATATGAACTATATTAACTTACTATAATCTTCAGGTTGACTAAGCTACCCACCAGGACTAACCCACTCATTACAATTTTGACTTTCAGTCGATGAGACGTAGAG', 'AATATGAACTTTATTAACTCACTATAAGCTTTGGTTGAACTAAGCCTTATAACCTAACTAACCCACTCATTACAATTTTGACTTTCAGTCGATGAGACGTAGAG', 'ACTATGAACTCTATTAACTGGTACATGTAGTAGATAGATAGTCACGCAGTCAGCTACGAAGTAAGACAGTAACGCAGCAAGCTTCATAGAGAGCTAGACACGCAGAGAGTTACGAAGAGAGCTAGACACGCAGAGAGTTACGAAGAAACGAAGAAACGAAGAAACGTAGATAGTCACGAAGATAGATAGATACGCAGAGTCAGAGAAACGAAGACAGATAGTCACGCAGTGACGAAGATAGTGAGTTACGCAGTCAGTGACGAAGAGAGCTAGACACGCAGAGAGTGACGAAGAGAGCTAGACACGCAGAGAGCAACGAAGAGAGCTAGACACGCAGAGAGTGTTAGAGCAAGCAAGTTACGCAGTAACGAAGTGAGTTAGACACGCAGCAAGCTACGAAGCAAGCAAGTTACGCAGTAACGAAGTTAGAGAGTCACGCAGATAGCTTCATAGAGAGCTAGACACGCAGAGAGTTACGAAGAGAGCTAGACACGCAGAGAGTTACGAAGAAACGAAGAAACGAAGAAACGTAGATAGTCACGTAGATAGATAGATACGCAGAGTTCCATTTTGACTTTCAGTCGATGAGACGTAGTA', 'TCTATGAACTGTATTAACCAACTAACATTAATTATGCGACTAAGCATCCCGCATTAACTATATATATATGCCGCACTAAGGGACATAGAGAGATTTTGACTTTCAGTCGATGAGACGTAGTT', 'TATATGAACCATATTAACCTACTAACAGGGTTATGCGAACTATAAATATGAAAAAAACTAAGCCACGCAAAAAAACTATAACACCCGTTGATATTTTGACTTTCAGTCGATGAGACGTAGTC', 'ACTATGAACCTTATTAACCCGTATTTCTAGTAGTCAGCAAGCAACGCAGTAAGTAACGAAGTTAGACAGTTACGCAGTGAGAGTCGAAGATACGCAGCAAGCAACGCAGCTAGAGACGAAGATAGATAGAAACGCAGTAAGCTACGTAGATAGATACGCAGTTAGTTACGTAGTCAGCTAGTGACGTAGACAGCAACGCAGTAAGCATCATAGAGAGCTAGTTACGCAGACAGCAACGAAGAGAGCTAGTTACGCAGACAGCAACGAAGAAACGAAGAAACGAAGAAACGAACGCAGACAGCAACGAAGATAGAAAGATACGCAGAGTCGAAGTTAGCAAGAGACGCAGTTAGTGACGTAGTCAGATTTCCATTTTGACTTTCAGTCGATGAGACGTAGTC', 'ACTATGAACCCTATTAACCGGTACTGATAGTAGCAAGTGAGATACGCAGACAGTTACGAAGTCAGTAAGAAACGCAGCTTCAGACGTAGCTAGTAACGCAGAGAGCTACGTAGACACGCAGTCAGACACGTAGATAGCTAGTCACGCAGTTAGCAACGAAGACAGTGACGTAGACAGCAAGTGACGCAGACAGAGACGAAGCTAGAAACGCAGACAGATTAAGAGTTAGAAAGCTACGCAGTGACGAAGTGAGCAAGAGACGAAGTAAGTTAGTAACGAAGCAAGTAAGCTACGCAGCTAGAGACGAAGTAAGATAGCTACGCAGTCAGCTACGAAGCTAGACAGATACGCAGTCAGCTTAATAGAGAGCTAGTAACGCAGTCAGTTACGAAGAGAGCTAGTAACGCAGTCAGTTACGAAGAAACGAAGAAACGAAGAAACGAAGTAAGCTAGAGACGAAGCTAGACAGCAACGCAGTTAGTCTAAGAGTCAGTGAGAGACGCAGTAAGTCACGAAGCTAGACAGCAACGCAGTTAGTCACGAAGCAAGACAGTTACGCAGTAAGAGACGAAGCAAGAAAGTCACGCAGTGAGTCACGAAGCAAGTGAGATACGCAGACAGTTACGAAGTCAGTAAGAAACGCAGCTTTCCATTTTGACTTTCAGTCGATGAGACGTAGTG', 'TATATGAACCGTATTAACGAACTAACGGGGCGGTTGATACTAACAATCGAGAGAGTACTAAGGCCTCCTTATGGACTATAAATCCGTGAACCATTTTGACTTTCAGTCGATGAGACGTAGCA', 'TATATGAACGATATTAACGTACTAACGGGGCGGTTGATACTAACAATCGAGAGAGTACTATAACTCGGATGCGAACTATAAATCCGTGAACCATTTTGACTTTCAGTCGATGAGACGTAGCA', 'AGTATGAACGTTATTAACGCGTATATTAGTGAGAAAGACACGCAGACAGCAACAAAGTCAGAGAGACACGCAGCAAGTGACAAAGTCAGCAAGTTACGCAGTAAGAGACAAAGTCAGTTAGTGACGCAGCAAGCTACAAAGTAAGTCAGCTACGCAGAAAGAGACAAAGTTAGTTAGAAACGCAGTGAGTCACAAAGTAAGCAAGTTACGCAGCAAGCAACAAAGTTAGACAGTTACGCAGTGAGAGACAAAGTGAGAAAGACACGCAGACAGCAACAAAGTCAGAGAGACACGCAGCAAGTGATTTTGACTTTCAGTCGATGAGACGTAGCA', 'AGTATGAACGCTATTAACGGGTATATTAGTAAGTCAGCTACGCAGAAAGAGACAAAGTCAGAGAGACACGCAGCAAGTGACAAAGTAAGCAAGTTACGCAGCAAGCAACAAAGTCAGTTAGTGACGCAGCAAGCTACAAAGTGAGAAAGACACGCAGACAGCAACAAAGTTAGTTAGAAACGCAGTGAGTCACAAAGTCAGCAAGTTACGCAGTAAGAGACAAAGTTAGACAGTTACGCAGTGAGAGACAAAGTAAGTCAGCTACGCAGAAAGAGACAAAGTCAGAGAGACACGCAGCAAGTGATTTTGACTTTCAGTCGATGAGACGTAGCA', 'ACTATGAACGGTATTAAGTAAGAGGTATAGTAGCAAGTGAGTCACGCAGTCAGAGACGAAGTCAGATAGCAACGCAGCTTCATAGAGAGCTAGACACGCAGTGAGTAACGAAGAGAGCTAGACACGCAGTGAGTAACGAAGAAACGAAGAAACGAAGAAACGAAGCAACGTAGTTAGCAACGCAGATAGAGTCGAACGTAGTCAGACACGCAGTGAGATACGAAGAGAGATTTCCATTTTGACTTTCAGTCGATGAGACGTAGTA', 'AGTATGAAGTAATATTAAGTATGTATATTAGTCAGCAAGCAACGCAGTAAGTAACAAAGTTAGACAGTTACGCAGTGAGAGACAAAGTCAGTGAGATACGCAGTTAGCTACAAAGTTAGTTAGAAACGCAGTGAGTCACAAAGTGAGTTAGTAACGCAGTTAGATACAAAGTTAGCTAGATACGCAGCAAGATACAAAGTGAGCAAGCAACGCAGACAGACACAAAGTTAGTGAGTTACGCAGATAGAGACAAAGTCAGCAAGCAACGCAGTAAGTAACAAAGTTAGACAGTTACGCAGTGAGAGATTTTGACTTTCAGTCGATGAGACGTAGCA', 'ACTATGAAGTATTATTAAGTACGTATTGGTAGTAGCAAGTGAGATACGCAGACAGTTACGAAGTCAGTAAGAAACGCAGCTTGATAGAGACGTAGATAGAAACGCAGCAAGTGACGAAGTTACGCAGAGAGCAACGTAGACAGACTCGAACGTAGTTAGTAACGCAGTGAGATACGTAGACAGTGACGCAGAAAGCTTAGAAGTGAGCAAGCAACGCAGACAGATACGAAGTCAGAAAGCAACGCAGTTTCGAAGTCAGTTACGCAGACAGACACGAAGAGAGACACGCAGACAGCTTTATAGCAAGTCAGACACGCAGAGAGCTACGAAGTCAGTAAGAAACGCAGTCAGTCACGAAGCAAGTGAGATACGCAGACAGTTACGAAGTCAGTAAGAAACGCAGCTTTCCATTTTGACTTTCAGTCGATGAGACGTAGCA', 'ACTATGAAGTACTATTAAGTAGGTATAGGTAGTAGCAAGACAGATACGCAGCTAGACACGAAGTTAGCTAGATACGCAGCAAGATTCGAAGTCAGACACGCAGTGAGATACGTAGAGAGATTGATACGCAGTGAGTTACGTAGATAGACACGCAGATAGCTACGCAGTGAGTGACGTAGACAGTAACGCAGTTAGCATCAGAGAAACGTAGAGACGCAGAAAGTTACGAAGAAACGTAGTCACGCAGAAAGCTACGTACGCAGATAGACACGTAGCTACGCAGATAGACTCGAACGTAGCTAGTGACGCAGAAAGTGACGAAGTAAGCAACGCAGAAAGTCTTCCATTTTGACTTTCAGTCGATGAGACGTAGCA', 'AGTATGAAGTAGTATTAAGTTAGTATATAAGTCAGTGAGATACGCAGTTAGCTACAAAGTCAGAGAGACACGCAGCAAGTGACAAAGTCAGCAAGCAACGCAGTAAGTAACAAAGTCAGTTAGTGACGCAGCAAGCTACAAAGTGAGCAAGCAACGCAGACAGACACAAAGTCAGAAAGCAACGCAGTTACAAAGTGAGTTAGTAACGCAGTTAGATACAAAGTTAGCTAGATACGCAGCAAGATACAAAGTCAGTGAGATACGCAGTTAGCTACAAAGTCAGAGAGACACGCAGCAAGTGATTTTGACTTTCAGTCGATGAGACGTAGCA', 'AGTATGAAGTTATATTAAGTTTGTATATAAGTGAGTTAGTAACGCAGTTAGATACAAAGTTAGCTAGATACGCAGCAAGATACAAAGTGAGCAAGCAACGCAGACAGACACAAAGTCAGAAAGCAACGCAGTTACAAAGCAAGACAGATACGCAGCTAGACACAAAGTTAGCTAGATACGCAGCAAGATACAAAGTGAGCAAGCAACGCAGACAGACACAAAGTTAGTGAGTTACGCAGATAGAGACAAAGTGAGTTAGTAACGCAGTTAGATACAAAGTTAGCTAGATACGCAGCAAGATATTTTGACTTTCAGTCGATGAGACGTAGCA', 'ACTATGAAGTTTTATTAAGTTCGTACTGGTAGTAGACAGCTAGACACGCAGAGAGCTACGAAGACAGAGAGCTACGCAGTTAGATTCCAAGAATCATAGCAAGTGACGCAGTGAGACACGAAGCAAGTGACGCAGTGAGACACGAAGAAACGAAGAAACGAAGAAACGAAGTAAGAGACGCAGTAAGTTACGAAGATAGATAGTCACGCAGACTCGAAGACAGTCAGCTACGCAGCTAGTAACGAAGATAGACAGAGTAATAGCAAGTGACGCAGTGAGACACGAAGCAAGTGACGCAGTGAGACACGAAGAAACGAAGAAACGAAGAAACGAAGTGAGACAGACACGAAGTAAGAGAGTTACGCAGACAGTTTCCAAGAATCATAGCAAGTGACGCAGTAACGAAGCAAGTGACGCAGTAACGAAGAAACGAAGAAACGAAGAAACGAAGACACGCAGATACGTAGTCAGTGACGCAGTGAGATTCGAACGTAGTAAGAAAGTGACGTAGATAGTTAGCTACGCAGCAAGCTTAATAGCAAGTGACGCAGAGAGTTACGAAGCAAGTGACGCAGAGAGTTACGAAGAAACGAAGAAACGAAGAAACGAAGACAGCTAGACACGCAGAGAGCTACGAAGACAGAGAGCTACGCAGTTAGATTTCCATTTTGACTTTCAGTCGATGAGACGTAGCT', 'ACTATGAAGTTCTATTAAGTTGGTATGTGTAGTAGTCAGCTAGAAACGCAGAGAGACACGAAGTTAGACAGTCACGCAGTCAGTCTCGAAGCTAGTGACGCAGCAAGCTACGAAGTAAGCAACGCAGTAAGTGACGAAGCTAGTGACGCAGAAAGTGACGTAGTAAGCAACGCAGAAAGTCTCATAGAGAGCTAGATACGCAGCTACGAAGAGAGCTAGATACGCAGCTACGAAGAAACGAAGAAACGAAGAAACGTAGATAGTTACGCAGCTAGACACGTAGATAGAAAGACACGCAGATAGCATACAAGATAGATAGTCACGCAGTCAGCTTCATAGAGAGCTAGATACGCAGACAGACACGAAGAGAGCTAGATACGCAGACAGACACGAAGAAACGAAGAAACGAAGAAACGTAGATAGACACGCAGCTAGACACGAAGTCAGATACGCAGTGAGTATCGAAGTCAGCTAGTGACGAAGACAGCAACGCAGTAAGCATTCCATTTTGACTTTCAGTCGATGAGACGTAGTA', 'AGTATGAAGTTGTATTAAGTCAGAGGTGAGTCAGCAAGTGACGCAGTCAGACACAAAGTTAGACAGTCACGCAGCTAGTAACAAAGTCAGCTAGAAACGCAGAGAGACACAAAGTTAGACAGTCACGCAGTCAGTCACAAAGTCAGCAAGCAACGCAGTAAGTAACAAAGTTAGACAGTTACGCAGTGAGAGACAAAGTCAGCAAGTGACGCAGTCAGACACAAAGTTAGACAGTCACGCAGCTAGTAATTTTGACTTTCAGTCGATGAGACGTAGTA', 'AATATGAAGTCATATTAAGTCTACTATAAGAGTTAGAGAGACTAAGTTTAATATGCGAACTAACCCTGAATTATGGATTTTGACTTTCAGTCGATGAGACGTAGAG', 'ACTATGAAGTCTTATTAAGTCCGTACACGTAGTAGCAAGCAAGAGACGCAGTAAGCAACGAAGTAAGCTAGTGACGCAGAGAGATTACAAGTAAGTAAGAGACGCAGTCAGATTCATAGACAGAGACGCAGCTAGACACGAAGACAGAGACGCAGCTAGACACGAAGAAACGAAGAAACGAAGAAACGTAGACAGAGACGCAGCTAGACACGAAGACAGAGACGCAGCTAGATTCCAAGAATCATAGACAGAGACGCAGCTAGACACGAAGACAGAGACGCAGCTAGACACGAAGAAACGAAGAAACGAAGAAACGAAGACAGAGACGCAGCTAGACACGAAGACAGAGACGCAGCTAGACTACAAGCAAGCAAGTTACGCAGACAGCTTCAGACGCAGAAAGTCACGTAGAGACGAACGCAGATAGATACGTAGTCACGAACGCAGATAGATACGTAGCAACGCAGCTAGTTTTATAGCAAGCAAGTTACGCAGTAACGAAGTTAGATAGTCACGCAGTTAGATACGAAGCAAGCAAGAGACGCAGTAAGCAACGAAGTAAGCTAGTGACGCAGAGAGATTTCCATTTTGACTCTCAGTCGATGAGACGTAGATAGAA', 'ACTATGAAGTCCTATTTATTGTATTTATAGTAGCAAGTCAGCTACGCAGAGAGTAACGAAGTAAGACAGTAACGCAGCAAGAGTCATAGAGAGCTAGATACGCAGAAAGTTACGAAGAGAGCTAGATACGCAGAAAGTTACGAAGAAACGAAGAAACGAAGAAACGTAGTCAGACACGCAGATAGACACGTAGATAGACAGAGACGCAGTGAGATTAAGAGTGAGTTAGCAACGAAGAGAGATAGACACGCAGAGAGACACGAAGTCAGCAAGTCACGCAGTAAGTGACGAAGAGAGTAAGAGACGAAGTCAGAAAGTAACGCAGTTAGTAACGAAGTAAGACAGTAACGCAGTTAGCATTCCATTTTGACTTTCAGTCGATGAGACGTAGTG']
    print(generate_svg(seq)) 
    
    
# def generate_circle(circle):
#     # <circle class="st0" cx="32" cy="29.6" r="4.4"/>
#     line = '<circle '
#     if circle[-2] != None:
#         line += 'id = \"{}\" '.format(circle[-2])
#     if circle[-1] != None:
#         line += 'class = \"{}\" '.format(circle[-1])
#     line += 'cx = \"{}\" cy = \"{}\" r = \"{}\"/>'.format(
#         circle[4], circle[5], circle[6])
#     return line

# # 关系有关！！！


# def generate_g(g):
#     line = '<g '
#     if g[-2] != None:
#         line += 'id = \"{}\" '.format(g[-2])
#     if g[-1] != None:
#         line += 'class = \"{}\" '.format(g[-1])
#     line += '></g>'
#     return line


# def generate_path(path):
#     line = '<path '
#     if path[-2] != None:
#         line += 'id = \"{}\" '.format(path[-2])
#     if path[-1] != None:
#         line += 'class = \"{}\" '.format(path[-1])
#     line += 'd=\"{}\"'.format(path[4])
#     line += '/>'
#     return line


# def generate_polygon(polygon):
#     line = '<polygon '
#     if polygon[-2] != None:
#         line += 'id = \"{}\" '.format(polygon[-2])
#     if polygon[-1] != None:
#         line += 'class = \"{}\" '.format(polygon[-1])
#     line += 'points = \"{}\"'.format(polygon[4])
#     line += '/>'
#     return line


# def generate_rect(rect):
#     line = '<rect '
#     if rect[-2] != None:
#         line += 'id = \"{}\" '.format(rect[-2])
#     if rect[-1] != None:
#         line += 'class = \"{}\" '.format(rect[-1])
#     line += 'height=\"{}\" width=\"{}\" x=\"{}\" y=\"{}\"'.format(
#         rect[7], rect[6], rect[4], rect[5])
#     line += '/>'
#     return line


# def generate_style(style):
#     line = '<style>'
#     line += style[4]
#     line += '</style>'
#     return line

# def generate_ellipse(ellipse):
#     line = '<ellipse '
#     if ellipse[-2] != None:
#         line += 'id = \"{}\" '.format(ellipse[-2])
#     if ellipse[-1] != None:
#         line += 'class = \"{}\" '.format(ellipse[-1])
#     line += 'ry = \"{}\" rx = \"{}\" cy = \"{}\" cx = \"{}\"'.format(
#         ellipse[4], ellipse[5], ellipse[6],ellipse[7])
#     line += '></ellipse>'
#     return line

# def generate_defs(defs):
#     line = '<defs '
#     if defs[-2] != None:
#         line += 'id = \"{}\" '.format(defs[-2])
#     if defs[-1] != None:
#         line += 'class = \"{}\" '.format(defs[-1])
#     line += '></defs>'    
#     return line
    
# generate_tag_dict = {"circle": generate_circle, "g": generate_g, "path": generate_path,
#                      "polygon": generate_polygon, "rect": generate_rect, "style": generate_style,"ellipse":generate_ellipse,"defs":generate_defs}


# def func_None(seq):
#     print('无对应函数')


# def generate_tag(tag):
#     name = tag[0]
#     return generate_tag_dict.get(name, func_None)(tag)
# # 将嵌套的标签写入

